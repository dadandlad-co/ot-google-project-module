---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: '3'

vars:
  MODULES_DIRS:
    - modules/project
    - modules/billing-budget
  EXAMPLES_DIRS:
    - examples/simple
    - examples/complete

tasks:
  default:
    cmds:
      - task --list
    silent: true

  dev-setup:
    desc: Set up development environment
    cmds:
      - echo "Setting up development environment..."
      - direnv allow
      - pre-commit install
      - echo "Development environment ready!"

  validate:
    desc: Validate all modules and examples
    cmds:
      - echo "Validating modules..."
      - |
        for dir in {{.MODULES_DIRS}}; do
          if [ -d "$dir" ]; then
            echo "Validating $dir"
            cd "$dir" && tofu init -backend=false && tofu validate && tofu fmt -check && cd - > /dev/null
          fi
        done
      - echo "Validating examples..."
      - |
        for dir in {{.EXAMPLES_DIRS}}; do
          if [ -d "$dir" ]; then
            echo "Validating $dir"
            cd "$dir" && tofu init -backend=false && tofu validate && tofu fmt -check && cd - > /dev/null
          fi
        done

  test:
    desc: Run all tests
    deps: [test-simple, test-complete]

  test-simple:
    desc: Test simple example
    cmds:
      - echo "Testing simple example..."
      - |
        cd examples/simple && \
        tofu init && \
        tofu plan -var="project_id=test-simple-$(date +%s)" -out=tfplan && \
        echo "Simple example validation: PASSED"

  test-complete:
    desc: Test complete example
    cmds:
      - echo "Testing complete example..."
      - |
        cd examples/complete && \
        tofu init && \
        tofu plan -var="project_id=test-complete-$(date +%s)" -out=tfplan && \
        echo "Complete example validation: PASSED"

  fmt:
    desc: Format all OpenTofu files
    cmds:
      - echo "Formatting all files..."
      - tofu fmt -recursive .
      - echo "All files formatted"

  documentation:
    desc: Generate documentation
    cmds:
      - echo "Generating documentation..."
      - |
        for dir in {{.MODULES_DIRS}}; do
          if [ -d "$dir" ]; then
            echo "Generating docs for $dir"
            cd "$dir" && terraform-docs markdown . > README.md && cd - > /dev/null
          fi
        done

  security-scan:
    desc: Run security scans
    cmds:
      - echo "Running security scans..."
      - trufflehog git file://. --since-commit HEAD --only-verified --fail
      - echo "Security scan completed"

  pre-commit:
    desc: Run pre-commit hooks
    cmds:
      - pre-commit autoupdate
      - pre-commit run -a

  clean:
    desc: Clean up temporary files
    cmds:
      - echo "Cleaning up..."
      - |
        find . \( \
          -name '*.HOLD' -o \
          -type d -name '.terraform' -o \
          -type f -name '*.tfstate*' -o \
          -type f -name '.terraform.lock.hcl' -o \
          -type f -name 'tfplan' \
        \) -exec rm -rf {} + 2>/dev/null || true
      - echo "Clean completed"
